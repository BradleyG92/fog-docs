

== NFS's roles in FOG ==

NFS is used to transfer images to and from hosts in FOG, and is used on both the host and server. The server's setting file controls what files & directories are exported, and their options. NFS allows writing to the /images/dev directory and allows reading from the /images directory. During imaging, the host mounts either /images/dev (for uploading or capturing an image) or /images (for downloading or deploying an image).

During upload/capture, NFS uploads images to:  /images/dev/<MAC Address Of Client>

During download/deployment, NFS downloads images from:   /images/<Image Path>

Please note that FTP is used to move images from /images/dev to /images. Also note that an imported directory can not be re-exported. For example, if you have a remote share mounted to your FOG server, you cannot export this directory via /etc/exports for imaging purposes. If you'd like your storage to be remote, an additional storage node or an FTP & NFS capable NAS device must be used.

== Testing NFS ==


=== Using a FOG debug deployment for testing (easy & quick way) ===

The first thing we must do is create a test file that we use to test with. On your FOG server:
<pre>echo 'This is the text I use to test with.' > /images/test.txt</pre>


Select the problematic client from your Hosts list in the web UI, Choose "Basic Tasks", then pick download. Create an immediate debug task. See picture below:

[[File:Debug Download Task.png]]


At the client, if it did not WOL, turn it on.
After the client shows options on the screen, you can press [enter] twice to be given a command prompt.

You first need to create two directories to mount to:
<pre>mkdir /images
mkdir /images/dev</pre>


Next, we will mount to FOG's remote image directories like this:

<pre>mount -o nolock,proto=tcp,rsize=32768,intr,noatime x.x.x.x:/images /images
mount -o nolock,proto=tcp,rsize=32768,intr,noatime x.x.x.x:/images/dev/ /images/dev</pre>


Next, we will execute a command that will test download and upload at the same time. We will attempt to read /images/test.txt and write that file to /images/dev/test.txt

<pre>cp /images/test.txt /images/dev/test.txt</pre>

If you recieved no errors, you're probably good to go. You can confirm all went well by looking at the contents of the moved file:
<pre>cat /images/dev/test.txt</pre>

=== Using a separate Linux machine for testing (hard & long way) ===

==== below r3472 (1.2.0 is below r3472, if you're above this, proceed to 2.2.2)====

inside /etc/exports on the FOG server,
Set the fsid for /images to 0 and /images/dev to 1

<pre>sudo vi /etc/exports</pre>

instructions on using Vi: [[Vi]]

Save that, exit that, then run this:
<pre>exportfs -a</pre>

'''Restart NFS and RPC''' (see services below)

After restarting NFS and RPC, '''proceed to the steps just below''':

==== r3473 and above ====


The first thing we must do is create a test file that we use to test with. On your FOG server:
<pre>echo 'This is the text I use to test with.' > /images/test.txt</pre>

At the CLI of the '''separate Linux machine''':

Create local directories

<pre>mkdir /images
mkdir /images/dev</pre>

You can configure the mounts for the /images and the /images/dev directories of your FOG server on your separate Linux machine by executing these two commands:

<pre>mount x.x.x.x:/images /images
mount x.x.x.x:/images/dev /images/dev</pre>


Next, we will execute a command that will test download and upload at the same time. We will attempt to read /images/test.txt and write that file to /images/dev/test.txt

<pre>cp /images/test.txt /images/dev/test.txt</pre>

If you recieved no errors, you're probably good to go. You can confirm all went well by looking at the contents of the moved file:
<pre>cat /images/dev/test.txt</pre>

== NFS & RPC / Portmap Service ==



=== Fedora 20/21/22/23 ===

NFS Status:
<pre>systemctl status nfs-server</pre> (should be on and green, no errors, and enabled)

The restart command is most useful, if any errors are encountered during manual start/restart, they are displayed.
<pre>systemctl restart nfs-server</pre>

Enable NFS on boot:
<pre>systemctl enable nfs-server</pre>


RPC Status:
<pre>systemctl status rpcbind</pre>

Restart RPC:
<pre>systemctl restart rpcbind</pre>

Enable RPC on boot:
<pre>systemctl enable rpcbind</pre>

=== Ubuntu ===

NFS status:
<pre>sudo service nfs-kernel-server status</pre>

The restart command is most useful, if any errors are encountered during manual start/restart, they are displayed.
<pre>sudo service nfs-kernel-server restart</pre>

Enable on boot:
<pre>update-rc.d nfs-kernel-server defaults</pre>

RPC status:
<pre>sudo service rpcbind status</pre>

Restart RPC:
<pre>sudo service rpcbind restart</pre>

Enable RPC on boot:
<pre>update-rc.d rpcbind defaults</pre>

== FOG's web console NFS settings ==

Applies to FOG 1.2.0 and up.

Inside of here:

Storage Management -> [YourStorageNode] -> Image Path 

This is the actual path of the images directory on the storage node. In a basic installation, the storage node is hosted on the FOG server itself. The image path should be reflected inside of the /etc/exports file (See NFS Settings below).

Most commonly, the image path is simply:
<pre>/images</pre>

== NFS Settings File ==

The primary NFS settings file is located here:
<pre>/etc/exports</pre>

To view the contents of the file:
<pre>cat /etc/exports</pre>


On a standard FOG install where everything is self-contained on one system, it should look like this:
<pre>/images *(ro,sync,no_wdelay,no_subtree_check,insecure_locks,no_root_squash,insecure,fsid=0)
/images/dev *(rw,async,no_wdelay,no_subtree_check,no_root_squash,insecure,fsid=1)
</pre>

To edit the file:
<pre>sudo vi /etc/exports</pre>

Instructions on using Vi: [[Vi]]

== Creating & verifying .mntcheck files ==

.mntcheck is a hidden and empty file that a FOG client uses during image upload/capture and image download/deployment to verify an NFS share is mounted correctly.


To create these files, on the FOG server:
<pre>touch /images/.mntcheck
touch /images/dev/.mntcheck</pre>

Verify these files with: 

<pre>ls -laR /images | grep .mntcheck</pre>

This should return two results. One for /images and one for /images/dev

Permissions should also be set appropriately for these files. See the permissions section.

== Disable & Verify Firewall ==

{{:Disable & Verify Firewall}}



== Permissions ==

For the purposes of this article (troubleshooting), the /images directory should have 777 permissions set recursively.

You can do that like this:
<pre>chmod -R 777 /images</pre>

== Common problems and fixes ==


=== My problem isn't in the WiKi! ===

{{:My problem isn't in the WiKi!}}




=== Image Capture: Error Checking Mount ===

{{:Image Capture: Error Checking Mount}}

----